<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 林克融]]></title>
  <link href="http://sayaku.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://sayaku.github.io/"/>
  <updated>2016-06-04T22:12:27+09:00</updated>
  <id>http://sayaku.github.io/</id>
  <author>
    <name><![CDATA[sayaku]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[筆記]Ruby語言入門-物件]]></title>
    <link href="http://sayaku.github.io/blog/2016/05/11/ruby3/"/>
    <updated>2016-05-11T16:09:37+09:00</updated>
    <id>http://sayaku.github.io/blog/2016/05/11/ruby3</id>
    <content type="html"><![CDATA[<p>上回<a href="http://sayaku.github.io/blog/2016/05/09/ruby2/">Ruby語言入門-方法與區塊</a>之後</p>

<p>這回要來筆記Ruby的物件</p>

<!--more-->


<p>在Ruby裡面，可以說幾乎所有東西都是物件</p>

<p>每個物件都有他的狀態跟行為</p>

<p>以下面這個前一回就有介紹過的ruby程式碼</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="mi">5</span><span class="o">.</span><span class="n">times</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這邊看到，"5"這個數字本身就是個物件</p>

<p>然後它有一個方法叫做times</p>

<p>以之前學到物件導向程式語言的概念</p>

<p>我會認為是5這個物件上呼叫了times這個方法</p>

<p>但實際上在Ruby他是用一個接收者傳遞訊息的概念</p>

<p>5是接收者（recever）</p>

<p>times是訊息(message)</p>

<p>意義是我們對這個物件傳送一個訊息，並不是5這個物件上呼叫了times這個方法</p>

<p>這概念來自smalltalk這個古老的語言，有類似概念的語言還有objective c</p>

<h1>類別(Class)</h1>

<p>類別在Ruby的樹狀結構圖裡本身也是個物件</p>

<p>他的用意是在做物件的“分類”</p>

<p>就像我們的世界也分類成界,門,綱,目,科,屬,種</p>

<p>試著在ruby裡定義動物的類別</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#類別的命名有個規定，就是必須是常數&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">class</span> <span class="nc">Animal</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面很簡單的就定義了一個動物的類別</p>

<p>通常動物都會有睡覺的行為</p>

<p>所以我們可以這樣幫動物定義睡覺的行為</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">sleep</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">zzz</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>由於類別本身是抽象的，沒有一個實體</p>

<p>類別就像建築藍圖一樣，我們必須去依照這個藍圖去蓋一個建築物出來</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#定義好類別</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">sleep</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">zzz</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #實作類別實體</span>
</span><span class='line'><span class="sr">  #比如我們可以說“人”是動物的一種&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">person</span> <span class="o">=</span> <span class="no">Animal</span><span class="o">.</span><span class="n">new</span> <span class="c1">#實作一個叫做人的動物&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#因為動物裡面有定義了睡覺這個行為</span>
</span><span class='line'>  <span class="c1">#以動物這個類別藍圖所建構出來的人理所當然也會有睡覺的行為&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">person</span><span class="o">.</span><span class="n">sleep</span><span class="p">()</span> <span class="c1">#輸出  zzz&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>我們可以說上面的<code>person</code>是由Animal建構出來的類別實體</p>

<h1>類別的繼承</h1>

<p>雖然我們可以說人類是個動物</p>

<p>但不代表動物一定就是人類</p>

<p>所以我們可以自己去幫原本的動物類別做擴充</p>

<p>以動物這個類別再去細分更多的類別</p>

<p>例如我們可以再去細分一個“人類”的類別</p>

<p>並且新增人類會有的行為</p>

<p>我們可以這樣寫
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Animal</span>
</span><span class='line'><span class="sr">     def sleep</span>
</span><span class='line'><span class="sr">        puts &amp;ldquo;zzz&amp;rdquo;</span>
</span><span class='line'><span class="sr">     end</span>
</span><span class='line'><span class="sr">   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#定義人類的類別並且繼承擴充自動物</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Human</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Animal</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">talk</span>
</span><span class='line'>         <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">你好嗎？</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  person = Human.new #實作一個人</span>
</span><span class='line'><span class="sr">  person.talk() #這個人會講話</span>
</span><span class='line'><span class="sr">  #由於人是由Animal擴充來的，自然也會睡覺了</span>
</span><span class='line'><span class="sr">  person.sleep() #輸出  zzz&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這樣我們就能製造很多人了ＸＤ</p>

<h1>實體變數</h1>

<p>前面有說過一個物件是由狀態跟行為構成的</p>

<p>比如說一個人，他現在的狀態是18歲的青少年，名字叫sayaku,他的行為有走路，跑步，講話等等</p>

<p>在物件導向的程式語言裡，我們會稱這些狀態為物件的<code>屬性</code>,行為會稱為物件的<code>方法</code></p>

<p>寫起來大概就像這樣
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1">#物件的屬性</span>
</span><span class='line'> <span class="n">person</span><span class="o">.</span><span class="n">age</span><span class="o">=</span><span class="mi">18</span>
</span><span class='line'> <span class="n">person</span><span class="o">.</span><span class="n">name</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt; #物件的方法</span>
</span><span class='line'><span class="sr"> person.sleep()</span>
</span><span class='line'><span class="sr"> person.run()</span>
</span><span class='line'><span class="sr"> &amp;hellip;&amp;hellip;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>現在我們要來定義這個青少年的狀態</p>

<p>希望在建構這個人的時候順便定義他的歲數</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Human &amp;lt; Animal</span>
</span><span class='line'><span class="sr">      #實體建構時帶參數，預設會先去帶到initialize這個方法&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>     <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  person = Human.new(18) #建構的時候帶18的參數&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上方的程式，我們看到在建構人類的實體時，順便告訴類別我的年齡是18歲</p>

<p>並且指定到<code>@age</code>這個<code>實體變數</code></p>

<p>所以在ruby的類別裡，多了一個前綴符號<code>@</code>就代表實體變數</p>

<p>也就是說理論上我們使用下面這個方式應該能夠預期這個人的歲數是18</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="nb">puts</span> <span class="n">person</span><span class="o">.</span><span class="n">age</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>但不幸的，這樣子Ruby會跟你說person這個實體沒有age這個<code>“方法”</code></p>

<p>那該怎麼辦？</p>

<p>那就幫這個物件增加一個age的方法吧
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Human &amp;lt; Animal</span>
</span><span class='line'><span class="sr">      def initialize(age)</span>
</span><span class='line'><span class="sr">         @age = age</span>
</span><span class='line'><span class="sr">      end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">age</span>
</span><span class='line'>     <span class="k">return</span> <span class="vi">@age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  person = Human.new(18) #建構的時候帶18的參數</span>
</span><span class='line'><span class="sr">  puts person.age   #輸出 18,</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面的<code>person.age</code>原本是<code>person.age()</code></p>

<p>但因為在ruby裡括號是能省略，所以這邊看起來就像是屬性一樣</p>

<p>那因為年齡會隨著時間流逝而改變</p>

<p>所以我們可以期待改變年齡應該要這樣寫</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="n">person</span><span class="o">.</span><span class="n">age</span><span class="o">=</span> <span class="mi">19</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; puts person.age</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>很不幸的，ruby又告訴你沒有<code>age=</code>這個<code>方法</code></p>

<p>這邊就蠻有趣的，因為之前有說過，Ruby的方法命名是可以帶符號的</p>

<p>所以這邊就生一個<code>age=</code>的方法出來</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Human &amp;lt; Animal</span>
</span><span class='line'><span class="sr">      def initialize(age)</span>
</span><span class='line'><span class="sr">         @age = age</span>
</span><span class='line'><span class="sr">      end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">age</span>
</span><span class='line'>     <span class="k">return</span> <span class="vi">@age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">age</span><span class="o">=</span> <span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>     <span class="vi">@age</span><span class="o">=</span><span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  person = Human.new(18)</span>
</span><span class='line'><span class="sr">  puts person.age   #輸出 18&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">person</span><span class="o">.</span><span class="n">age</span><span class="o">=</span><span class="mi">19</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">person</span><span class="o">.</span><span class="n">age</span>   <span class="c1">#輸出 19&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這樣就可以了！</p>

<p>所以實際上person.age=19這一段，原本應該是長這樣<code>person.age= (19)</code></p>

<p>從上面的實作過程中可以了解到，ruby其實是沒有實體的屬性，全部都是透過<code>方法</code>來達成</p>

<p>在程式裡利用方法來存取屬性，我們可以稱為類別的封裝</p>

<p>也是就是其他程式語言常看到的getter and setter</p>

<p>另外我們也可以發現，要設定或是提取實體變數的值時都要個別的幫他定義方法，這實在太麻煩了</p>

<p>所以裡面的<code>age</code>與<code>age=</code>這兩個方法可以再簡寫成</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class Human &amp;lt; Animal&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kp">attr_reader</span> <span class="ss">:age</span>
</span><span class='line'>    <span class="kp">attr_writer</span> <span class="ss">:age</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>     <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這樣的效果也是一樣</p>

<p>當然多加了這兩行又覺得太麻煩</p>

<p>所以又可以再簡寫成一行</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Human</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Animal</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  attr_accessor  :age</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def initialize(age)</span>
</span><span class='line'><span class="sr">     @age = age</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>類別方法</h1>

<p>前面有說過，類別本身也是物件</p>

<p>既然是物件，理當可以有自己的行為方法</p>

<p>就好比類別是藍圖的紙，實體是依照藍圖蓋出來的建築物</p>

<p>例如藍圖的紙可以被撕掉或是供人畫圖</p>

<p>這些可以當作藍圖這張紙的方法</p>

<p>那類別方法該怎麼定義？</p>

<p>在定義之前我們可以看看Ruby的一個特性</p>

<p>就是Ruby可以在任意物件上加入任意方法</p>

<p>如下面
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="c1">#定義貓的類別&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">class</span> <span class="nc">Cat</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #實作出一隻貓</span>
</span><span class='line'><span class="sr">   kitty=Cat.new&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果今天我們想讓這隻貓有會叫的方法</p>

<p>我們除了在Cat類別裡面定義外還有其他的方法嗎？</p>

<p>我們可以這樣做</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="c1">#定義貓的類別&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">class</span> <span class="nc">Cat</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #實作出一隻貓</span>
</span><span class='line'><span class="sr">   kitty=Cat.new&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">def</span> <span class="nc">kitty</span><span class="o">.</span><span class="nf">say_hello</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   kitty.say_hello  #輸出hi</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面可以看到，我們可以在<code>任意物件上加入任意方法</code></p>

<p>所以這時這隻貓就有say hello的行為了</p>

<p>當然這樣寫的，也只有這隻kitty貓有這種行為</p>

<p>其他由Cat實作出來的貓就不會有這方法</p>

<p>這在其他的程式語言又叫單體方法（Singleton method）</p>

<p>Ruby可以很簡單的達成這種需求</p>

<p>由於剛剛說的<code>Ruby可以在任意物件上加入任意方法</code></p>

<p>類別本身又是物件</p>

<p>所以可以寫成這樣</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Cat</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nc">Cat</span><span class="o">.</span><span class="nf">all</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">我是類別的方法</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Cat.all  #輸出 我是類別的方法&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>所以實際上類別方法是作用在類別上的單體方法</p>

<p>可以再簡化到類別自己的裡面
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Cat</span>
</span><span class='line'>      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">all</span>
</span><span class='line'>         <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">我是類別的方法</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>      <span class="k">end</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Cat.all  #輸出 我是類別的方法&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這邊的<code>self</code>會指向到類別本身</p>

<p>如果我同時要定義好幾個類別方法，每個方法前都要寫self還蠻麻煩的</p>

<p>所以你可以這樣寫
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Cat</span>
</span><span class='line'>      <span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">self</span>
</span><span class='line'>          <span class="c1">#放在lass &amp;lt;&amp;lt; self end裡面就不用再加self</span>
</span><span class='line'>          <span class="k">def</span> <span class="nf">all</span>
</span><span class='line'>             <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">我是類別的方法</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="o">.</span>
</span><span class='line'>      <span class="o">.</span>
</span><span class='line'>      <span class="o">.</span>
</span><span class='line'>      <span class="o">.</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Cat.all  #輸出 我是類別的方法&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>開放類別(Open Class)</h1>

<p>在ruby裡，如果同名的兩個類別，ruby會自動幫你做合併</p>

<p>如果類別內有同名的方法，那後面定義的方法會複寫掉前面所定義的方法
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">AA</span>
</span><span class='line'>     <span class="k">def</span> <span class="nf">hi</span>
</span><span class='line'>       <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  class AA</span>
</span><span class='line'><span class="sr">     def hi</span>
</span><span class='line'><span class="sr">       puts &amp;ldquo;hihi&amp;rdquo;</span>
</span><span class='line'><span class="sr">     end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">okok</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="s2">&quot;okok&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #以上ruby會把兩個AA合併起來，重複定義的方法會以後面定義的為主</span>
</span><span class='line'><span class="sr">   a=AA.new</span>
</span><span class='line'><span class="sr">   a.hi      #輸出 hihi</span>
</span><span class='line'><span class="sr">   a.okok    #輸出 okok</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>重複定義的方法會以後面定義的為主,但如果我想用被覆蓋前的方法定義可以用</p>

<p><code>#alias_method</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">class</span> <span class="nc">BB</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">hi</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">first</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class BB</span>
</span><span class='line'><span class="sr">  alias_method :old_hi, :hi #將上一個hi的方法對應到old_hi</span>
</span><span class='line'><span class="sr">      def hi</span>
</span><span class='line'><span class="sr">            puts &quot;last&quot;</span>
</span><span class='line'><span class="sr">      end</span>
</span><span class='line'><span class="sr">  end   </span>
</span><span class='line'>
</span><span class='line'><span class="sr"> b=BB.new </span>
</span><span class='line'><span class="sr"> b.hi          #輸出 last</span>
</span><span class='line'><span class="sr"> b.old_hi      #輸出 first</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以用在如果原作者原方法寫很爛，但是又不得不用到他可以用這個方法，保留舊方法，用自己新的方法</p>

<p>可以隨時把類別拿出來修改，這就叫開放類別</p>

<p>但因為很容易複寫原本方法的定義，即使是內建的類別要拿出來惡搞複寫也可以</p>

<p>所以這種特性是把雙面刃，有些人也不喜歡這樣，就稱為猴子補丁</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]Ruby語言入門-方法與區塊]]></title>
    <link href="http://sayaku.github.io/blog/2016/05/09/ruby2/"/>
    <updated>2016-05-09T16:55:08+09:00</updated>
    <id>http://sayaku.github.io/blog/2016/05/09/ruby2</id>
    <content type="html"><![CDATA[<p>繼上一篇<a href="http://sayaku.github.io/blog/2016/05/09/ruby_1/">Ruby語言入門-基礎篇</a></p>

<p>這篇要來筆記Ruby的方法（Method）與區塊（Block）</p>

<!--more-->


<h1>方法 （Method）</h1>

<p>有些人會解釋成函數（Function）,Ruby這邊叫方法（Method）</p>

<p>其實用久了我還比較喜歡叫方法</p>

<p>方法的定義</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="c1">#定義一個叫做hello的方法&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="s2">&quot;hi i am sayaku&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span><span class="p">()</span> <span class="c1">#印出hi i am sayaku</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#如果想要帶參數的話</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="s2">&quot;hi i am </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> &quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">hello</span><span class="p">(</span><span class="s2">&quot;sayaku&quot;</span><span class="p">)</span>  <span class="c1">#印出hi i am sayaku</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在Ruby裡，方法的括號常常省略掉</p>

<p>所以常常會看到有這樣的寫法
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class Animal</span>
</span><span class='line'><span class="sr">  def sleep</span>
</span><span class='line'><span class="sr">    puts &quot;zzz&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這算是一個特色，而在Ruby裡面，方法還有一大特色是他的命名</p>

<p>可以使用符號，例如<br/>
<code>?</code> <br/>
<code>!</code>   <br/>
<code>=</code>  <br/>
&hellip;.等</p>

<p>但必須附在名字後面</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def is_adult?(age)</span>
</span><span class='line'><span class="sr">    return age&amp;gt;=18     #可以省略return關鍵字，ruby預設會回傳最後一個結果</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">p is_adilt?(29) #印出true    </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>雖然Ruby可以讓你在方法名稱後面加這些符號，但在Ruby圈裡會有些慣例</p>

<p>例如，在名稱後面加上<code>?</code>通常會回傳布林值</p>

<p>如果在名稱後面加上<code>!</code>通常會有帶有警告意味</p>

<p>告訴你說，你用了這個方法可能會產生一些意想不到的後果喔</p>

<p>舉個例子,Ruby的陣列有一個方法叫reverse</p>

<p>它的用途是將陣列的順序整個反轉</p>

<p>但同時他也有一個方法叫reverse!</p>

<p>看到後面有接一個驚嘆號，是用了這個方法會有一些意想不到的效果與風險</p>

<p>測測看這兩個差在哪邊</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;arr=[1,2,3,4,5,6,7]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">p arr.reverse #印出[7,6,5,4,3,2,1]</span>
</span><span class='line'><span class="sr">p arr         #印出[1,2,3,4,5,6,7]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">#如果這時使用reverse! 呢？</span>
</span><span class='line'>
</span><span class='line'><span class="sr">p arr.reverse! #印出[7,6,5,4,3,2,1]</span>
</span><span class='line'><span class="sr">p arr          #印出[7,6,5,4,3,2,1]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>看了上面的例子發現到使用reverse!後也把原陣列的內容一起改變了</p>

<p>所以通常附加驚嘆號的方法可能會有些風險</p>

<p>而通常有驚嘆號版本的也通常會附一個普通正常的版本</p>

<p>所以使用前請詳略公開說明書</p>

<p>由於Ruby方法的括號可以省略，所以也造就了一些特殊的寫法</p>

<p>例如，</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">hello</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="mi">18</span><span class="p">,</span><span class="ss">tel</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">091234567</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="ss">email</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#x74;&amp;#111;&amp;#58;&amp;#120;&amp;#x78;&amp;#120;&amp;#x40;&amp;#x67;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6c;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#120;&amp;#x78;&amp;#120;&amp;#x40;&amp;#x67;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>看完上面的例子，我們知道有一個hello的方法</p>

<p>可以預期他應該是有4個參數</p>

<p>但實際呢？</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="c1">#還原</span>
</span><span class='line'>    <span class="n">hello</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="mi">18</span><span class="p">,{</span><span class="ss">tel</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">091234567</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="ss">email</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#120;&amp;#120;&amp;#x78;&amp;#x40;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#120;&amp;#120;&amp;#x78;&amp;#x40;&amp;#x67;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&lt;/a&gt;&amp;rdquo;})&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">#你以為hello有四個參數，實際上它只有三個參數</span>
</span><span class='line'><span class="c1">#如果最後一個參數是Hash的話則可以省略大括號</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#所以就變成這樣</span>
</span><span class='line'><span class="n">hello</span><span class="p">(</span><span class="s2">&quot;sayaku&quot;</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="ss">tel</span><span class="p">:</span> <span class="s2">&quot;091234567&quot;</span><span class="p">,</span><span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;xxx@gmail.com&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#又ruby的括號可以省略掉，就變成</span>
</span><span class='line'><span class="n">hello</span> <span class="s2">&quot;sayaku&quot;</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="ss">tel</span><span class="p">:</span> <span class="s2">&quot;091234567&quot;</span><span class="p">,</span><span class="ss">email</span><span class="p">:</span> <span class="s2">&quot;xxx@gmail.com&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>區塊（Block）</h1>

<p>區塊在ruby裡面也是個蠻特殊的存在</p>

<p>一直不明白他是怎麼運作的</p>

<p>直到最近才知道他的運作原理</p>

<p>比如我們上一篇在迴圈那邊有一個跑五遍"我是天才"的程式</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;5.times do </span>
</span><span class='line'><span class="sr">   puts &quot;我是天才&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">#結果會印出五遍</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可以預期猜想到有一個叫times的方法，但後面的do end又是什麼呢？</p>

<p>而do end看起來也不像要填入方法的參數，這邊的do end 就是區塊的概念</p>

<p>以下可以來實作
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="c1">#首先單純定義一個hello的方法&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hello</span><span class="p">,</span> <span class="n">ruby</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #這時照本宣科do end的寫法</span>
</span><span class='line'><span class="sr">   hello do</span>
</span><span class='line'><span class="sr">        puts &amp;ldquo;hihi&amp;rdquo;</span>
</span><span class='line'><span class="sr">   end</span>
</span><span class='line'><span class="sr">   #會發現沒有作用</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果想要讓上面的區塊有效用</p>

<p>則必須寫</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   def hello</span>
</span><span class='line'><span class="sr">     puts &amp;ldquo;first&amp;rdquo;</span>
</span><span class='line'><span class="sr">     yield</span>
</span><span class='line'><span class="sr">     puts &amp;ldquo;last&amp;rdquo;    # &amp;lt;=多印這行是用來觀察先後順序的</span>
</span><span class='line'><span class="sr">   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">hello</span> <span class="k">do</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hihi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #輸出</span>
</span><span class='line'><span class="sr">   #first</span>
</span><span class='line'><span class="sr">   #hihi</span>
</span><span class='line'><span class="sr">   #last&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>從上面發現</p>

<p>方法裡多下了一個關鍵字<code>yield</code></p>

<p>並且也看到hello的區塊也執行了</p>

<p>這個<code>yield</code>用途是將目前程式的行使權暫時給讓出來</p>

<p>讓到哪邊？就讓到區塊那個區域，區塊結束後才繼續回到方法裡面繼續執行</p>

<p>所以我們可以看到執行的順序是方法=>區塊=>方法</p>

<p>另外區塊也是可以帶參數的
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   def hello&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">yield</span> <span class="s2">&quot;sayaku&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #上面yield的參數會帶到下面區塊的|name|裡&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">hello</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span> <span class="o">!</span> <span class="c1">#{name} &amp;rdquo;</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #輸出 hi ! sayaku</span>
</span><span class='line'><span class="sr">   #當然！也可以帶多個參數&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">def</span> <span class="nf">hello</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; yield 10,10</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">hello</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">p</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>   <span class="c1">#輸出結果為20&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="c1">#當然！hello本身也是可以帶參數的</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>     <span class="k">yield</span> <span class="nb">name</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   hello &amp;ldquo;sayaku&amp;rdquo; do |name|</span>
</span><span class='line'><span class="sr">      puts &amp;ldquo;my name is </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sr">&amp;rdquo;</span>
</span><span class='line'><span class="sr">   end</span>
</span><span class='line'><span class="sr">   #輸出結果為my name is sayaku&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上面的最後一個範例裡面</p>

<p>如果我們已經定義好區塊了</p>

<p>但如果之後只是單純寫
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">hello</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>會發現程式壞掉了</p>

<p>原因是因為yield出去的參數沒有區塊接</p>

<p>所以就壞掉了</p>

<p>那這時要怎麼判斷使用者有沒有寫區塊呢？</p>

<p>Ruby有提供一個判斷方法
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">def</span> <span class="nf">hello</span> <span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">block_given?</span> <span class="c1">#判斷執行方法時後面有沒有跟區塊</span>
</span><span class='line'>        <span class="k">yield</span> <span class="nb">name</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; hello(&quot;hi&quot;)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這樣寫的話就算沒實作區塊程式也不會壞了</p>

<p>接下來練習自己定義怎麼讓區塊跑五次</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="k">def</span> <span class="nf">my_times</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="n">i</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">n</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">n</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #實作跑五次</span>
</span><span class='line'><span class="sr">    my_times(5) do |x|</span>
</span><span class='line'><span class="sr">       puts &amp;ldquo;hi </span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="sr">&amp;rdquo;</span>
</span><span class='line'><span class="sr">    end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>另外do end還有幾種簡便的寫法</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">hello</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #do end可以用{}代替&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">hello</span> <span class="s2">&quot;sayaku&quot;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;hi&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在區塊裡{}雖然大部分可以等同do end</p>

<p>某些狀況下還是有一些差別</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;do end與{}的差別&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">如果是單行的話建議使用</span><span class="p">{}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;如果是多行會建議使用do end&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">另外</span><span class="p">{}</span><span class="err">的優先順序會比</span><span class="k">do</span> <span class="k">end</span><span class="err">要優先</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;p [&lt;em&gt;1..5].map {|x|  x * 2 }</span>
</span><span class='line'><span class="sr">p [&lt;/em</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">].</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>  <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">end</span> <span class="c1">#只會印出1,2,3,4,5因為他實際會先執行前面（[*1..5].map）&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">如果想要結果一樣可以寫成</span>   <span class="nb">p</span> <span class="p">(</span><span class="o">[*</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">].</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>  <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">end</span><span class="p">)</span><span class="err">用括號整個包起來</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>下一篇,Ruby的物件導向</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]Ruby語言入門-基礎篇]]></title>
    <link href="http://sayaku.github.io/blog/2016/05/09/ruby_1/"/>
    <updated>2016-05-09T11:22:36+09:00</updated>
    <id>http://sayaku.github.io/blog/2016/05/09/ruby_1</id>
    <content type="html"><![CDATA[<p>基於上課時的Ruby而做的筆記</p>

<p>邊寫邊練習，順便複習</p>

<!--more-->


<p>關於Ruby的介紹與環境設定可以參考前幾篇文章-<a href="http://sayaku.github.io/blog/2016/01/20/learnruby/">Ruby on Rails入門筆記(0)-開發前環境設定</a></p>

<h1>變數與常數</h1>

<h2>變數</h2>

<p>首先介紹變數，變數就是會變的數（廢話）</p>

<p>Ruby的寫法如下</p>

<p>印出簡單的"hello world"</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="c1">#不同於其他語言，ruby的變數不需宣告&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="nb">name</span>  <span class="c1">#輸出“hello world”</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#ruby支援萬用字元，所以你變數名稱也可以取中文</span>
</span><span class='line'>
</span><span class='line'><span class="err">姓名</span> <span class="o">=</span> <span class="s2">&quot;你好，世界&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="err">姓名</span>  <span class="c1">#輸出&quot;你好，世界&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="err">お名前は　</span><span class="o">=</span> <span class="s2">&quot;こんにちは、世界&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="err">お名前は</span>  <span class="c1">#輸出&quot;こんにちは、世界&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>常數</h2>

<p>常數一般來說就是恆常的數，不變的數</p>

<p>但是在Ruby裡的常數卻是可以被更改的</p>

<p>常數在Ruby裡有個規定，就是開頭字母必須為大寫，或是全部為大寫</p>

<p>所以常數的命名就不能用中文之類的語言啦
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="no">Pi</span> <span class="o">=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1415926</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="no">Pi</span> <span class="c1">#3.1415926&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="c1">#雖然在ruby裡面常數是能被改變的，但你在印出時他會給你警告&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="no">Pi</span> <span class="o">=</span> <span class="mi">1234567</span> <span class="c1">#在其他如javascript語言這段就會報錯</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="no">Pi</span>      <span class="c1">#warning: already initialized constant Pi</span>
</span><span class='line'>                <span class="c1">#warning: previous definition of Pi was here</span>
</span><span class='line'>                <span class="c1">#還是印出1234567&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>印出結果</h2>

<p>ruby在終端機印出結果是用到幾個方法</p>

<p>如<code>print</code>,<code>puts</code>,<code>p</code>等等</p>

<p>他們的差別如下 <br/>
<code>print</code>：印出結果不斷行<br/>
<code>puts</code>：印出結果後並斷行<br/>
<code>p</code>：完整的印出結果（包含型態，例如字串連"&ldquo;都一起印出來）後並斷行</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="nb">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="c1">#是put string的縮寫，請唸成put・s,不要唸成“舖疵”</span>
</span><span class='line'>   <span class="nb">p</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #印出結果如下</span>
</span><span class='line'><span class="sr">   # hihih</span>
</span><span class='line'><span class="sr">   # &amp;ldquo;hi&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>印出結果帶參數</h2>

<p>如果想要在印出結果帶前面已定義好的變數可以用<code>#{ 值 }</code></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  puts &amp;ldquo;Hi my name is </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="sr">&amp;rdquo; #印出結果Hi my name is sayaku&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#如果我今天想要印出#{}該怎麼寫？</span>
</span><span class='line'>  <span class="c1">#有兩種方法&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Hi</span> <span class="n">my</span> <span class="nb">name</span> <span class="n">is</span> <span class="c1">#{name}&amp;rdquo; #使用跳脫字元&quot;\&amp;ldquo;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Hi</span> <span class="n">my</span> <span class="nb">name</span> <span class="n">is</span> <span class="c1">#{name}&amp;rsquo; #字串使用單引號&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#印出結果都是Hi my name is #{name}&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>陣列與雜湊</h1>

<h2>陣列（Array）</h2>

<p>與其他語言的概念一樣，就像櫃子一樣，每層抽屜就代表一個元素</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  array = [1,2,3,4,5,6,7]</span>
</span><span class='line'><span class="sr">  puts array[0]  #印出陣列裡第一個元素 1</span>
</span><span class='line'><span class="sr">  puts array[-1] #印出陣列裡最後一個元素 7&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#有Ruby風格的寫法&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="nb">puts</span> <span class="n">array</span><span class="o">.</span><span class="n">first</span> <span class="c1">#印出陣列裡第一個元素 1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">array</span><span class="o">.</span><span class="n">last</span>  <span class="c1">#印出陣列裡最後一個元素 7&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#在ruby陣列裡每個元素可以是不同的型態，可以是數字也可以是字串，也可以是其他物件</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hi</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="mi">4</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  #如果想快速寫出1~100的陣列元素</span>
</span><span class='line'><span class="sr">  #其他語言的寫法大概是用迴圈的寫法，跑100遍然後塞值進陣列</span>
</span><span class='line'><span class="sr">  #但ruby可以這樣寫</span>
</span><span class='line'><span class="sr">  array = [*1..100]</span>
</span><span class='line'><span class="sr">  #這種寫法叫splat&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#塞值進陣列</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  p array  #印出[1,2]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>雜湊（Hash）</h2>

<p>Hash是許多語言都有的寫法</p>

<p>就像Json格式一樣，一個key然後搭配一個值</p>

<p>這種一個蘿蔔一個坑的寫法，概念上大概就是沒有順序的陣列</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  hash={ name: &amp;ldquo;sayaku&amp;rdquo; }</span>
</span><span class='line'><span class="sr">  #key值是name,他的值sayaku&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#當然也可以有很多的key值或是巢狀的寫法</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">=</span><span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#88;&amp;#88;&amp;#x58;&amp;#64;&amp;#103;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#88;&amp;#x58;&amp;#88;&amp;#64;&amp;#103;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&amp;rdquo; }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#提取值的方法,在ruby比較特別</span>
</span><span class='line'>  <span class="c1">#如果是用</span>
</span><span class='line'>  <span class="nb">p</span> <span class="nb">hash</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span> <span class="c1">#印出nil&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#必須要寫成帶符號(Symbol)的寫法</span>
</span><span class='line'>  <span class="nb">p</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="c1">#印出“sayaku”&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#實際上Ruby雜湊真正的寫法是</span>
</span><span class='line'>  <span class="nb">hash</span><span class="o">=</span><span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x58;&amp;#x58;&amp;#88;&amp;#x40;&amp;#x67;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#x58;&amp;#x58;&amp;#88;&amp;#x40;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;rdquo; }&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#但因為不太好看，也不太好閱讀，所以新版的Ruby新增加了最上面這種寫法的語法糖衣&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在上述<code>p hash[&ldquo;name&rdquo;]</code>為什麼會印出<code>nil</code></p>

<p>跟ruby的符號(Symbol)的概念有關</p>

<p>符號的概念可以參考龍哥的<a href="http://kaochenlong.com/2016/04/25/string-and-symbol/">這篇</a></p>

<h1>迴圈與迭代</h1>

<p>會用到迴圈跟迭代，就是要用做處理重複的事情</p>

<p>例如我想印出五遍<code>我是天才</code></p>

<p>在ruby的寫法可寫成</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  5.times  do</span>
</span><span class='line'><span class="sr">      puts &amp;ldquo;我是天才&amp;rdquo;</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1">#印出</span>
</span><span class='line'>  <span class="c1">#我是天才</span>
</span><span class='line'>  <span class="c1">#我是天才</span>
</span><span class='line'>  <span class="c1">#我是天才</span>
</span><span class='line'>  <span class="c1">#我是天才</span>
</span><span class='line'>  <span class="c1">#我是天才&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>通常陣列都會搭配迴圈來使用</p>

<p>因為你拿到一堆資料後，通常第一件事就是把資料全部印出來</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #for .. in迴圈</span>
</span><span class='line'><span class="sr">   for f in array</span>
</span><span class='line'><span class="sr">      puts f</span>
</span><span class='line'><span class="sr">   end</span>
</span><span class='line'><span class="sr">   #意義是從array撈每個元素出來，並將每次撈出來的元素指定給f變數</span>
</span><span class='line'><span class="sr">   #印出</span>
</span><span class='line'><span class="sr">   #1</span>
</span><span class='line'><span class="sr">   #2</span>
</span><span class='line'><span class="sr">   #3</span>
</span><span class='line'><span class="sr">   #4</span>
</span><span class='line'><span class="sr">   #5&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="c1">#另一種寫法，each迴圈&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">f</span>
</span><span class='line'>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #印出</span>
</span><span class='line'><span class="sr">   #1</span>
</span><span class='line'><span class="sr">   #2</span>
</span><span class='line'><span class="sr">   #3</span>
</span><span class='line'><span class="sr">   #4</span>
</span><span class='line'><span class="sr">   #5&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>判斷陳述式</h1>

<p>每個程式語言基本上的都有的判斷式</p>

<p>判斷式就是告訴電腦，當我達成某條件就走Ａ路徑，否則就走Ｂ路徑</p>

<p>就會有所謂的真假判斷，不是真就是假，就是所謂的true and false</p>

<p>在ruby裡面，只有兩種物件會被判定為false,其他都是true</p>

<p>這兩種物件是 <br/>
1.<code>false</code>  <br/>
2.<code>nil</code></p>

<p>與其他程式語言不同的是，<code>0</code>在ruby裡面是判斷為true</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   #描述當我大於等於18會跑向true,否則跑向false</span>
</span><span class='line'><span class="sr">    if(age &gt;= 18 ) then</span>
</span><span class='line'><span class="sr">       true</span>
</span><span class='line'><span class="sr">    else</span>
</span><span class='line'><span class="sr">       false     &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1">#如果if有寫成斷行，那then可以省略,但如果寫成單一行就一定要寫then&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">#另外！在ruby裡面的註解是用井字號#作為註解</span>
</span><span class='line'><span class="c1">#但也有人利用判斷式來寫註解</span>
</span><span class='line'><span class="c1">#例如</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="kp">false</span>
</span><span class='line'>   <span class="err">因為這邊條件是假，程式不會不會執行到這個區塊</span>
</span><span class='line'>   <span class="err">所以這邊可以當成註解來寫</span>
</span><span class='line'>   <span class="err">我是註解我是註解</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]Ruby的RVM,GEM,Bundler是什麼？]]></title>
    <link href="http://sayaku.github.io/blog/2016/05/05/rubyde-rvm-gem-bundler/"/>
    <updated>2016-05-05T10:48:54+09:00</updated>
    <id>http://sayaku.github.io/blog/2016/05/05/rubyde-rvm-gem-bundler</id>
    <content type="html"><![CDATA[<p>初入門Ruby on Rails的時候在做環境設定時</p>

<p>我們總是會遇到RVM,GEM,Bundler這幾個東西</p>

<p>都知道他們是管理套件相關的東西，但都傻傻分不清楚他們到底在管理什麼</p>

<p>今天就來整理一下</p>

<!--more-->


<h1>RVM</h1>

<p>這個東西是用來管理Ruby這個程式語言版本的套件</p>

<p>由於Ruby有很多個版本，比如1.8.X~2.3.X</p>

<p>還有嵌入式系統用輕巧的mruby</p>

<p>或是jruby等等</p>

<p>這麼多ruby的版本如果搞不清楚什麼時候用什麼版本或是切換版本就很麻煩</p>

<p>所以就有這套ＲＶＭ來做Ruby的版本管理</p>

<p>安裝方法可以直接到他們<a href="https://rvm.io/">官網</a></p>

<p>將那一串指令貼到終端機上就能安裝了</p>

<p>安裝完後</p>

<p>我們可以使用上面剛安裝好的RVM來安裝其他版本的Ruby</p>

<p>例如我想安裝<code>2.3.0</code>的Ruby可以這樣下</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>rvm install 2.3.0
</span></code></pre></td></tr></table></div></figure></p>

<p>裝好之後</p>

<p>我們可以下</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>ruby <span class="p">&amp;</span>ndash<span class="p">;</span>version
</span><span class='line'>    //或是
</span><span class='line'>    <span class="nv">$ </span>ruby -v
</span></code></pre></td></tr></table></div></figure></p>

<p>得知目前使用ruby的版本</p>

<p>那我想知道ruby的位置在電腦的哪邊</p>

<p>可以下
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>which ruby
</span></code></pre></td></tr></table></div></figure></p>

<p>因為我們是用rvm管理ruby的關係</p>

<p>所以路徑會是<code>～～～/.rvm/rubies/ruby-2.3.0/bin/ruby </code>>之類的</p>

<p>可以看到ruby不同的版本都會放在<code>～～/.rvm/rubies </code>這個路徑下</p>

<p>要打開該路徑資料夾</p>

<p>可以用open的指令</p>

<p>以我的為例</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>open /Users/sayaku/.rvm/rubies
</span></code></pre></td></tr></table></div></figure></p>

<p>就可以看到剛剛下載的<code>ruby-2.3.0</code>的資料夾</p>

<h1>Gem</h1>

<p>在Ruby的世界，有很多用Ruby寫成的套件包或是框架可以用</p>

<p>才能造就Ruby這個程式的多樣與豐富性，例如有名Rails就是ruby的套件</p>

<p>那我們要怎麼找尋這些套件並且管理呢？</p>

<p>而Gem就是用來搜尋套件用與管理的玩意</p>

<p>其實我們在安裝Ruby的時候就會內建Gem</p>

<p>用rvm下載ruby的話，Gem的預設位置會在<code>.rvm/gems</code></p>

<p>而使用gem下載的套件則會安裝到<code>.rvm/gems/{ruby版本}</code></p>

<p>而要搜尋gem裡面有什麼套件，可以到rubygems的<a href="https://rubygems.org/">官網</a>搜尋</p>

<p>例如我們想要下載rails這個套件</p>

<p>可以在終端機下指令</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>gem install rails
</span></code></pre></td></tr></table></div></figure></p>

<p>這樣就會幫你把rails下載到預設的gems資料夾裡</p>

<h1>Bundler</h1>

<p>bundler也是ruby的套件，可以從gem上面下載</p>

<p>他是用來解決gem套件相依性問題的套件</p>

<p>這樣講好像有點不清楚</p>

<p>這樣說好了，每一個套件的作者，可能每一段時間就會為這個套件推出新的版本</p>

<p>所以即使是rails這個套件也會有很多版本（目前穩定版4.2.6)</p>

<p>而套件有很多個版本在專案上就會有套件版本管理上的問題</p>

<p>例如有一個Ａ專案，他使用Ｂ套件（1.0.0版），而這個Ｂ套件會用到Ｃ套件（1.0.0版）</p>

<p>今天客戶可能搬到新的主機了</p>

<p>主機上也有其他專案，但是用Ｂ套件（2.0.0版），然後這個Ｂ套件會用到Ｃ套件（2.0.0版）</p>

<p>這時候Ａ專案搬到新主機可能就沒辦法RUN</p>

<p>因為Ａ專案需要用到Ｂ套件的1.0.0版，如果只是單純幾個套件那還好改，但通常每個套件都會在用到其他好幾個另外的套件</p>

<p>其他的套件只要版本不符可能都會跑不起來，就會有每個套件版本相依性的問題</p>

<p>而Bundler則是解決這個問題的套件</p>

<p>使用gem安裝bundler</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>gem install bundler
</span></code></pre></td></tr></table></div></figure></p>

<p>裝好以後，你可以在你的專案資料夾下
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>bundle init
</span></code></pre></td></tr></table></div></figure></p>

<p>他會在你的專案資料夾下創一個<code>Gemfile</code>的檔案</p>

<p>你可以在Gemfile裡面聲明專案會用到的RubyGems套件</p>

<p>並且定義在專案裡這些套件要使用的版本</p>

<p>定義好了以後</p>

<p>使用</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>bundle install
</span><span class='line'>    或是
</span><span class='line'>    <span class="nv">$ </span>bundle
</span></code></pre></td></tr></table></div></figure></p>

<p>bundler會依照Gemfile所定義的RubyGems套件去下載</p>

<p>並將當前所有套件的版本做一個快照檔Gemfile.lock存起來</p>

<p>未來專案bundle會根據Gemfile.lock快照決定Gemfile是否有修改來進行套件的更新</p>

<p>而Gemfile的寫法細節可以參考<a href="http://kaochenlong.com/2016/05/02/gemfile/">龍哥</a></p>

<p>使用bundler就不用去煩惱哪個套件用到哪個版本的其他套件</p>

<p>很方便</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails入門筆記(1)-TodoMVC]]></title>
    <link href="http://sayaku.github.io/blog/2016/01/22/railsScaffold/"/>
    <updated>2016-01-22T17:17:28+09:00</updated>
    <id>http://sayaku.github.io/blog/2016/01/22/railsScaffold</id>
    <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/9/9c/Ruby_on_Rails_logo.jpg" alt="" /></p>

<!--more-->


<p>每一種網頁框架都會有一個簡單的todo的實作</p>

<p>今天來介紹使用ruby on rails的scaffold(鷹架)快速製作一個簡單的Todo範例</p>

<p>並且介紹rails的ＭＶＣ流程</p>

<p>todo範例的內容通常會有讓使用者新增、修改、刪除資料的內容</p>

<p>所以這個範例會做一個簡單通訊錄的內容</p>

<p>使用者可以新增聯絡人然後修改內容或是刪除聯絡人</p>

<p>至於ruby on rails的環境設定可以參考上一回:<a href="http://sayaku.github.io/blog/2016/01/20/learnruby/">Ruby on Rails入門筆記(0)-開發前環境設定</a></p>

<p>在開始之前可以先介紹ruby on rails的哲學</p>

<blockquote><p>-依照慣例來打造<br/>
Convention over Configuration (CoC)</p>

<p>-不做重複的事情<br/>
Don&rsquo;t Repeat Yourself (DRY)</p>

<p>-簡單實現資料庫的新增、搜尋、修改、刪除<br/>
Create, Read, Update, Delete (CRUD)</p>

<p>-使用設計模式的ＭＶＣ，讓程式碼分離！更好維護<br/>
Model, View, Controller (MVC)</p></blockquote>

<p>好！開始囉</p>

<p>首先先安裝rails</p>

<p>打開terminal終端機，使用gem來下載rails</p>

<p>輸入指令
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>gem install rails
</span></code></pre></td></tr></table></div></figure></p>

<p>下載完後可以用<code>rails -v</code>來查看目前rails的版本</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909233_2nsin36_l.png" alt="" /></p>

<p>我的版本是4.2.5</p>

<p>接下來創建一個rails的專案todo（當然名字不一定要是todo,隨你喜好命名也可）</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>rails new todo
</span></code></pre></td></tr></table></div></figure></p>

<p>rails會幫你建好專案會用到的資料夾</p>

<p>建好以後還會順便幫你用bundle來更新你gemfile所指定套件的版本</p>

<p>所以大概會花一些時間</p>

<p>建好之後可以發現rails幫你建了一個名為todo的專案資料夾</p>

<p>內容如下</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909234_f7cpdtt_l.png" alt="" /></p>

<p>接下來我們可以用我們上一回已經裝好的編輯器sublime text來開啟這個專案</p>

<p>打開sublime text後直接將todo資料夾拖到sublime text</p>

<p>就能開始開發專案了</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909235_zxg4hdg_l.png" alt="" />）</p>

<p>現在我們將終端機工作目錄移到todo資料夾下</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span><span class="nb">cd </span>todo
</span></code></pre></td></tr></table></div></figure></p>

<p>然後開啟rails的測試伺服器</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    <span class="nv">$ </span>rails server&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;//縮短寫法
</span><span class='line'><span class="nv">$ </span>rails s
</span><span class='line'>
</span><span class='line'>//如果是在cloud9上測試的話要用
</span><span class='line'><span class="nv">$ </span>rails server -p <span class="nv">$PORT</span> -b <span class="nv">$IP</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>這時候打開自己的瀏覽器輸入伺服器預設網址<code>127.0.0.1:3000</code></p>

<p>成功的話，就可以預覽剛剛用rails所建出來的第一個網站</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909261_7c1kufw_l.png" alt="" /></p>

<p>如果想關閉伺服器的話可以在終端機輸入<code>ctrl+C</code></p>

<p>或是直接關閉終端機</p>

<p>一般狀況我會再多開一個終端機的視窗繼續作業</p>

<p>先前我們有提到rails是使用MVC的架構，所以可以在app的資料夾裡看到這三個</p>

<p>要熟悉rails的運作必須要先了解MVC的運作方式</p>

<p>那rails的MVC架構是怎麼運作的呢？</p>

<p>我們來看下圖(圖片與說明參考至<a href="https://ihower.tw/rails4/basic.html">ROR實戰聖經</a> )</p>

<p><img src="https://ihower.tw/rails4/images/basic-mvc-diagram.png" alt="" /></p>

<p>這張圖示中的執行步驟是：</p>

<ol>
<li>使用者在瀏覽器發出HTTP request請求給伺服器的Rails</li>
<li>路由(Routing)收到瀏覽器端的請求
根據收到網址的規則告訴要處理請求的Controller去處理資料</li>
<li>Controller收到請求後看是否有需操作Model的資料並去撈取</li>
<li>Model收到Controller的請求去存取資料庫或資料處理然後傳回給Controller</li>
<li>Controller將得到的資料餵給View樣板</li>
<li>回傳最後的HTML成品給瀏覽器</li>
</ol>


<p>其中，路由主要是根據HTTP Method方法(GET、POST或是PATCH、DELETE等)以及網址來決定派往到哪一個Controller的Action。</p>

<p>上面主要是rails運作的流程</p>

<h1>Scaffold</h1>

<p>上面說到rails運作流程是用MVC去跑</p>

<p>也就是說我們必須要MVC架構裡的元件一個一個自己去建構嗎？</p>

<p>那也太麻煩了</p>

<p>所以rails有提供一個scaffold可以讓使用者快速建構出自己要的ＭＶＣ架構</p>

<p>再利用scaffold前我們要先確定我們要做通訊錄會有哪些欄位</p>

<p>一般通訊錄大概會有<br/>
1. 姓名<br/>
2. 電話<br/>
3. 電子郵件</p>

<p>了不起加個地址等&hellip;.</p>

<p>確定之後就可以開始用scaffold開始架構了</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    //我們新增一個User的table裡面有name,email,tel的欄位
</span><span class='line'>    <span class="nv">$ </span>rails generate scaffold User name:string email:string tel:string&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;//縮短寫法
</span><span class='line'>//如果欄位屬性不填屬性的話預設是string
</span><span class='line'><span class="nv">$ </span>rails g scaffold User name email tel
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>按下確定後我們會看到rails幫你建了一大堆東西</p>

<p>包含ＭＶＣ架構都一起建好了</p>

<p>接下來我們到todo目錄下有一個db的資料夾，打開裡面migrate資料夾有我們</p>

<p>創建資料表的欄位資訊
<img src="http://pcdn1.rimg.tw/photos/4909628_iy1u568_l.png" alt="" /></p>

<p>預設rails會幫你加一個唯一的id與時間戳記</p>

<p>scaffold創建好ＭＶＣ架構，但是還沒幫你創造資料庫的實體並且去做關聯</p>

<p>所以這時可以下</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:migrate
</span></code></pre></td></tr></table></div></figure></p>

<p>這時做好建構與關聯後</p>

<p>這時回到瀏覽器上（記得要打開伺服器 <code>rails s</code>）</p>

<p>網址輸入<code>127.0.0.1:3000/users</code></p>

<p>就能看到我們建好的結果了</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909640_uasm0dt_l.png" alt="" /></p>

<p>這時你可以隨意在上面新增修改刪除你要的資料了</p>

<p>當然你可能會覺得我明明在建立tabel時明明就是命名User</p>

<p>他這邊的網址怎麼變成users複數了呢？</p>

<p>這就是我們最上面講的rails的Convention over Configuration (CoC)</p>

<p>依造慣例來打造</p>

<p>因為rails認為這一頁會秀出所有的欄位資訊，所以應該是會有很多user</p>

<p>所以就幫他加上複數</p>

<p>那為什麼我會知道我用scallold建好的資料會在這個網站的users路徑下？</p>

<h1>Route</h1>

<p>這時我們在終端機輸入指令<code>rake routes</code></p>

<p>會跑出以下預設這八種方法</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909667_mkeqd8e_l.png" alt="" /></p>

<p>Prefix：是前綴索引字，未來程式的控制會常用到 <br/>
Verb：是瀏覽器傳送資料的方法，目前瀏覽器只有GET,POST兩種其他動作是rails幫我們定義的<br/>
URI Pattern：對照網址的相對位置<br/>
Controller#Action：則是每個route根據URI Pattern所對應到的位置指定controller的方法</p>

<p>所有新增查詢修改刪除的動作我們會發現在使用rails scaffold時通通都幫我們做掉了</p>

<p>那這個8個方法是怎麼來的？</p>

<p>接下來我們可以到todo目錄下config資料夾打開routes.rb的檔案</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909641_emlejei_l.png" alt="" /></p>

<p>我們可以看到<code>resources :users</code></p>

<p>resources會幫我們製造這八種方法</p>

<p>後面的users是複數則是rails的慣例</p>

<p>如果我們不想使用resources創造出來的八種方法</p>

<p>也可以自己定義想要的名字進入指定的頁面</p>

<p>我們回到routes.rb的檔案內</p>

<p>加入
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">sayaku</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">,</span><span class="ss">to</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="c1">#index&amp;rsquo;</span>
</span><span class='line'>  <span class="c1">#另一種寫法是</span>
</span><span class='line'>  <span class="c1">#get &amp;lsquo;/sayaku&amp;rsquo; =&gt; &amp;lsquo;users#index&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這段的意思就是我在網址的路徑後面加上<code>sayaku</code>就會指定controller去做指定的方法</p>

<p>所以我們打<code>127.0.0.1:3000/sayaku</code></p>

<p>一樣會連到剛剛的那個頁面</p>

<p>換個角度想如果想要打<code>127.0.0.1:3000</code>就直接進入這個頁面</p>

<p>也可以下成
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">,</span><span class="ss">to</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="c1">#index&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>當然rails也提供另一個方法可以指定首頁
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">root</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="c1">#index&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>效果也是一樣的</p>

<p>當然也有人利用route來作惡搞</p>

<p>例如利用route來偽裝成php或是asp做的網頁</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">sayaku</span><span class="o">.</span><span class="n">aspx</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="p">,</span><span class="ss">to</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">users</span><span class="c1">#index&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>甚至還可以做傳接值的動作</p>

<p>這樣別人不仔細看還以為是asp做的網站</p>

<p>這就是rails裡面route的應用，其用途就是在接收到網址去找對應的controller</p>

<h1>Controller</h1>

<p>我們由上面得知rails在接收到訊息會找指定的Controller</p>

<p>而這些Controller會放在todo目錄下app的資料夾</p>

<p>app資料夾下面則包含了rails實作出來MVC</p>

<p>而所有指定的controller會放到controllers的目錄下</p>

<p>以剛剛route接收到訊息並且呼叫<code>users#index</code></p>

<p>前面的<code>users</code>route會自己幫我們找在controllers下有沒有叫做users_controller.rb的檔案</p>

<p>後面的<code>#index</code>，會在users_controller.rb裡面找有沒有叫做index的方法並且去執行它</p>

<h1>Model</h1>

<p>在rails運作時期不一定要有model才能運作</p>

<p>如果Controller在使用過程中會存取到資料庫資訊時</p>

<p>則會去尋找對應的Model</p>

<p>因為這次我們有建構通訊錄欄位</p>

<p>在用scallold建構時欄位時</p>

<p>rails就有在app下面的models資料夾裡建構了一個user.rb</p>

<p>這邊的命名又回到單數了，因為rails一個table只會有一個user</p>

<p>所以這裡就是rails的慣例</p>

<p>還記得我們剛剛所做好的通訊錄嗎？</p>

<p>如果今天我們想要限制使用者如果沒有填特定資料就不給與寫入資料庫</p>

<p>不然有人要惡搞的話就一直新增空白資料</p>

<p>所以必須做個驗證</p>

<p>以前的方法可能是直接在前端做判斷然後擋下來</p>

<p>不過rails一樣也是有可以用簡單的方法來做過濾</p>

<p>例如今天我希望姓名欄位不能留白</p>

<p>我們可以在Model在寫入資料時做驗證</p>

<p>我們可以在user.rb裡下驗證的語法</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>    <span class="n">validates</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>這個意思就是指定name欄位會去做驗證</p>

<p>這邊有很多關於ruby的語法，改天會開一篇來介紹這邊就先不理他</p>

<p>所以我們在打開瀏覽器新增一筆資料然後什麼都不填並且送出</p>

<p>這時我們就會看到rails告訴你“你的名字欄位不能留白喔”等警告</p>

<p><img src="http://pcdn1.rimg.tw/photos/4909700_q3jmrpk_l.png" alt="" /></p>

<h1>View</h1>

<p>剛剛有提到，在Rails的ＭＶＣ運作下Model是不一定要存在的</p>

<p>以上面Model做驗證後會將資訊結果回傳給Controller</p>

<p>但是Controller本身無法給使用者看到</p>

<p>所以必須產出一個View讓使用者可以看到</p>

<p>在rails的ＭＶＣ架構下只有view的檔案不是ruby的rb檔案</p>

<p>而是html的樣板檔，所以如果想要達成前後端分離，</p>

<p>前端工程師美術設計要修改就可以直接在view去做修改</p>

<p>而產出的view預設會放在app的views的資料夾下</p>

<p>裡面會有layout跟controller對應的view資料夾</p>

<p>也就是我們一開始用scaffold時rails就一起幫我們建好了</p>

<p>這是非常的方便</p>

<p>scaffold雖然方便，但一次幫我們產出了我們很多不要的檔案</p>

<p>所以後面的筆記會來記錄自己一步一步純手工打造</p>

<p>而以目前做出來的todo範例，雖然該有的功能都有了，但整個介面實在是太醜了</p>

<p>所以美化使用者介面則在下一個單元來做介紹</p>

<h1>總結</h1>

<p>回顧今天要快速建一個通訊錄我們要做的步驟如下
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>   //1.建構專案
</span><span class='line'>   <span class="nv">$rails</span> new todo
</span><span class='line'>   //2.建構欄位ＭＶＣ
</span><span class='line'>   <span class="nv">$rails</span> g scaffold User name email tel
</span><span class='line'>   //3.建立實體資料庫並作關聯
</span><span class='line'>   <span class="nv">$rake</span> db:migrate&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   //結束
</span></code></pre></td></tr></table></div></figure></p>

<p>三個指令一次全部做完一個簡易通訊錄</p>

<p>大概花不到十秒吧！</p>

<p>在做個簡易的驗證還有頁面美化跟修改</p>

<p>大概十分鐘就完成了</p>

<p>rails真的很強大！！！</p>
]]></content>
  </entry>
  
</feed>
